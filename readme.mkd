<h1>VAMOS COME√áAR A AVENTURA!üöÄ <s>1.. 2.. 3.. Testando</s></h1>
<h2>Instalando depend√™ncias: npm install</h2>

<h1>Requisitos</h1>
<br>
<div>
<h3>1) Crie a fun√ß√£o Sum que recebe um array n√∫merico e retorna a soma inteira dos elementos</h3>
<p> - Se n√£o receber um array ou o array for vazio deve retornar null</p>
</div>
<br>
<h3>2) Teste a fun√ß√£o Sum</h3>
<br>
<div>
<h3>3) Crie a fun√ß√£o isString que recebe uma string e retorna a frase 'Essa string tem [quantidade de letras] letras'</h3>
<p> - Se n√£o receber uma string deve  retornar undefined</p>
</div>
<br>
<h3>4) Teste a fun√ß√£o isString</h3>
<br>
<div>
<h3>5) Crie a fun√ß√£o myValues que recebe um objeto com as chaves name e lastName e retorna um array com os valores'</h3>
<p> - Se n√£o receber um objeto deve lan√ßar um error com a mensagem 'Insira um objeto'</p>
</div>
<br>
<h3>6) Teste a fun√ß√£o myValues</h3>
<br>
<div>
<h3>7) Crie a fun√ß√£o calculate que recebe tr√™s strings e retorna um objeto com tr√™s chaves: stringOne, stringTwo, stringThree em que cada chave guardar√° cada string respectivamente'</h3>
<p> - As strings devem ser mai√∫sculas. Se n√£o receber uma das strings deve lan√ßar um error com a mensagem 'Par√¢metro inv√°lido'</p>
</div>
<br>
<h3>8) Teste a fun√ß√£o calculate</h3>
<br>
<div>
<h3>9) Crie os testes para a fun√ß√£o ifood e depois crie a fun√ß√£o ifood (utilize TDD)</h3>
<p> - A fun√ß√£o recebe uma comida, uma bebida e o valor total da compra</p>
<p> - A fun√ß√£o deve retornar um objeto com a chave pedido e a chave conta</p>
<p> - A chave pedido deve guardar um objeto com as chaves comida e bebida com os respectivos pedidos passados pelo par√¢metro</p>
<p> - A chave conta recebe o valor total acrescido de 5% da taxa de entrega</p>
</div>
<br>
